openapi: 3.0.3
info:
  title: UniApply Hub - Authentication API
  description: User authentication and session management endpoints
  version: 1.0.0
  contact:
    name: UniApply Hub API Team
    email: api@uniapplyhub.com

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.uniapplyhub.com
    description: Production server

paths:
  /auth/register:
    post:
      summary: Register new user account
      description: Create a new student account with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                  example: "student@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePass123"
                firstName:
                  type: string
                  minLength: 2
                  example: "John"
                lastName:
                  type: string
                  minLength: 2
                  example: "Doe"
                acceptTerms:
                  type: boolean
                  example: true
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Account created successfully"
                  user:
                    $ref: '#/components/schemas/UserProfile'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "student@example.com"
                password:
                  type: string
                  example: "SecurePass123"
                rememberMe:
                  type: boolean
                  example: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    $ref: '#/components/schemas/UserProfile'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get new access token using refresh token
      tags:
        - Authentication
      security:
        - refreshToken: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: User logout
      description: Invalidate user session and tokens
      tags:
        - Authentication
      security:
        - accessToken: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Send password reset email to user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "student@example.com"
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Password reset email sent"
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password:
    post:
      summary: Reset password with token
      description: Reset user password using reset token from email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                newPassword:
                  type: string
                  minLength: 8
                  example: "NewSecurePass123"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Password reset successfully"
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: string
          example: "64a7b8c9d1e2f3g4h5i6j7k8"
        email:
          type: string
          format: email
          example: "student@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        profileCompletion:
          type: number
          minimum: 0
          maximum: 100
          example: 65
        lastLoginAt:
          type: string
          format: date-time
          example: "2024-10-04T10:30:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2024-10-01T08:00:00Z"

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: number
          example: 900
        tokenType:
          type: string
          example: "Bearer"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Invalid input data"
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Valid email address is required"

  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token for API authentication
    refreshToken:
      type: apiKey
      in: cookie
      name: refreshToken
      description: Refresh token stored in httpOnly cookie

security:
  - accessToken: []